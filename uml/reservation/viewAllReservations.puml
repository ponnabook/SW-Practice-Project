@startuml View all Reservations (GET)

header Reservation Sequence Diagram
footer Page %page% of %lastpage%
title "View all Reservations (GET)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:reservation" as routerReservation
participant "<<middleware>>\n:auth" as middlewareAuth
participant "<<controllers>>\n:reservations" as controllersReservation
participant "<<model>>\n:Reservation" as modelReservation
participant "<<model>>\n:User" as modelUser
database "<<MongoDB>>\n:reservations" as ReservationsDatabase
database "<<MongoDB>>\n:users" as UsersDatabases

client->server ++:req.get('/reservations')
server->routerReservation ++:app.use('/reservations',reservations)
routerReservation -> middlewareAuth ++:protect()
alt token
    middlewareAuth->modelUser ++:findById(Token)
    modelUser->UsersDatabase ++:UserSchema
    modelUser<--UsersDatabase --:user
    middlewareAuth<--modelUser --:user
    middlewareAuth -> routerReservation --:next()
else !token || token == "null"
    middlewareAuth -> client --:res.status(401).json({error: 'Not authorized to access this route'})
end
routerReservation -> middlewareAuth ++:authorize('user, 'admin')
alt req.user.role === 'user' || req.user.role === 'admin'
    middlewareAuth -> routerReservation --:next()
else
    middlewareAuth -> client --:res.status(403).json({error: 'User role {req.user.role} not authorized to access this route'})
end
routerReservation -> controllersReservation ++:getReservations()

alt req.user.role !== 'admin'
    controllersReservation->modelReservation ++:find({ user: req.user.id })
else
    controllersReservation->modelReservation ++:find()
end
modelReservation ->ReservationsDatabase ++: reservationSchema
ReservationsDatabase --> modelReservation --: reservations
controllersReservation <-- modelReservation --: reservations
controllersReservation->client --: response


@enduml